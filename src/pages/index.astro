---
import { Image } from "astro:assets";

import Layout from "../layouts/Layout.astro";

import aboutMeImg from "../assets/images/aboutMe.jpeg";
import projectsImg from "../assets/images/projects.jpeg";
import resumeImg from "../assets/images/resume.jpeg";

const pages = [
  {
    name: "About Me",
    image: aboutMeImg,
  },
  {
    name: "Projects",
    image: projectsImg,
  },
  {
    name: "Resume",
    image: resumeImg,
  },
];
---

<Layout title="Jack Gong">
  <!-- <div class="flex flex-col text-center gap-8 my-8 px-2">
    <h1 class="font-bold text-9xl max-md:text-7xl">Hi, I'm Jack</h1>
    <h2 class="font-light text-2xl max-md:text-xl text-stone-500">
      What would you like to know?
    </h2>
  </div> -->

  <div
    id="observer"
    class="overflow-x-hidden absolute top-1/2 -translate-x-1/2 -translate-y-1/2 left-1/2 h-screen border-2 w-full max-w-screen-sm mx-auto"
  >
    {
      pages.map((page) => {
        return (
          <section class="absolute h-full w-full gap-2 top-0 left-0 bottom-0 right-0 grid grid-rows-12 items-center">
            <Image
              src={page.image}
              alt={page.name}
              class="h-full w-full object-contain border-white row-span-11"
            />
            <div class="flex flex-col items-center w-fit mx-auto">
              <h1 class="sectionName mt-auto text-4xl text-black">
                {page.name}
              </h1>
            </div>
          </section>
        );
      })
    }
  </div>
</Layout>

<script>
  import gsap from "gsap";
  import { Observer } from "gsap/Observer";

  gsap.registerPlugin(Observer);

  const sections = document.querySelectorAll("section");

  let animating: boolean;
  let currentIndex: number = -1;
  let wrap = gsap.utils.wrap(0, sections.length);
  let t1: gsap.core.Timeline = gsap.timeline({
    defaults: { duration: 1.5, ease: "power1.inOut" },
    onComplete: () => {
      animating = false;
    },
  });

  const gotoSection = (index: number, direction: number) => {
    index = wrap(index);
    animating = true;

    // Reset the zIndex and autoAlpha for all sections except the current one
    sections.forEach((section, i) => {
      if (i !== currentIndex && i !== index) {
        gsap.set(section, { zIndex: 0, autoAlpha: 0 });
      }
    });

    gsap.set(sections[currentIndex], { zIndex: 10 });
    // gsap.to(sections[currentIndex], {
    //   filter: "blur(5px)",
    //   duration: 0.5,
    // });

    gsap.set(sections[index], { autoAlpha: 1, zIndex: 20 });
    if (currentIndex == -1) {
      gsap.set(sections[index], { xPercent: 0 });
    } else {
      console.log(sections[currentIndex].querySelector(".sectionName"));
      t1.set(sections[index].querySelector(".sectionName"), {
        scale: 0.9,
        autoAlpha: 0.5,
      })
        .to(sections[currentIndex].querySelector(".sectionName"), {
          scale: 0.9,
          autoAlpha: 0.5,
          duration: 0.5,
        })
        .fromTo(sections[index], { xPercent: direction * 100 }, { xPercent: 0 })
        .fromTo(
          sections[currentIndex],
          { xPercent: 0 },
          { xPercent: direction * -100 },
          "<"
        )
        .to(sections[index].querySelector(".sectionName"), {
          scale: 1,
          autoAlpha: 1,
          duration: 0.5,
        });
    }

    currentIndex = index;
  };

  Observer.create({
    type: "wheel,touch,pointer",
    target: "#observer",
    wheelSpeed: -1,
    onRight: () => {
      !animating && gotoSection(currentIndex - 1, -1);
    },
    onLeft: () => !animating && gotoSection(currentIndex + 1, 1),
    tolerance: 10,
    preventDefault: true,
  });

  // const upButton = document.getElementById("upButton");
  // const downButton = document.getElementById("downButton");

  // if (!upButton || !downButton) {
  //   throw new Error("Buttons not found");
  // }
  // upButton.addEventListener("click", () => {
  //   !animating && gotoSection(currentIndex - 1, -1);
  // });
  // downButton.addEventListener("click", () => {
  //   !animating && gotoSection(currentIndex + 1, 1);
  // });

  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  console.log(Number(urlParams.get("page")));
  gotoSection(Number(urlParams.get("page")), -1);
</script>
