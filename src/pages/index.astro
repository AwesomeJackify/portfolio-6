---
import { Image } from "astro:assets";

import Layout from "../layouts/Layout.astro";

import aboutMeImg from "../assets/images/aboutMe.jpeg";
import projectsImg from "../assets/images/projects.jpeg";
import resumeImg from "../assets/images/resume.jpeg";

const pages = [
  {
    name: "About Me",
    image: aboutMeImg,
  },
  {
    name: "Projects",
    image: projectsImg,
  },
  {
    name: "Resume",
    image: resumeImg,
  },
];
---

<Layout title="Jack Gong">
  <h1>Hi, I'm Jack</h1>
  <h2>What do you want to know about me?</h2>

  <div
    class="overflow-hidden relative h-[500px] w-full max-w-screen-sm mx-auto"
  >
    {
      pages.map((page) => {
        return (
          <section class="absolute w-full h-full top-0 left-0 flex flex-col items-center">
            <Image
              src={page.image}
              alt={page.name}
              class="border-[16px] h-full w-full object-contain border-white"
            />
          </section>
        );
      })
    }
  </div>
</Layout>

<script>
  import gsap from "gsap";
  import { Observer } from "gsap/Observer";

  gsap.registerPlugin(Observer);

  const sections = document.querySelectorAll("section");

  let animating: boolean;
  let currentIndex: number = -1;
  let wrap = gsap.utils.wrap(0, sections.length);
  let t1: gsap.core.Timeline = gsap.timeline({
    defaults: { duration: 1.5, ease: "power1.inOut" },
    onComplete: () => {
      animating = false;
    },
  });

  const gotoSection = (index: number, direction: number) => {
    console.log(currentIndex, sections[currentIndex]);
    index = wrap(index);
    animating = true;

    // Reset the zIndex and autoAlpha for all sections except the current one
    sections.forEach((section, i) => {
      if (i !== currentIndex && i !== index) {
        gsap.set(section, { zIndex: 0, autoAlpha: 0 });
      }
    });

    gsap.set(sections[currentIndex], { zIndex: 10 });
    // gsap.to(sections[currentIndex], {
    //   filter: "blur(5px)",
    //   duration: 0.5,
    // });

    gsap.set(sections[index], { autoAlpha: 1, zIndex: 20 });
    if (currentIndex == -1) {
      gsap.set(sections[index], { xPercent: 0 });
    } else {
      t1.fromTo(
        sections[index],
        { xPercent: direction * 100 },
        { xPercent: 0 }
      ).fromTo(
        sections[currentIndex],
        { xPercent: 0 },
        { xPercent: direction * -100 },
        "<"
      );
    }

    currentIndex = index;
  };

  Observer.create({
    type: "wheel,touch,pointer",
    wheelSpeed: -1,
    onRight: () => {
      !animating && gotoSection(currentIndex - 1, -1);
    },
    onLeft: () => !animating && gotoSection(currentIndex + 1, 1),
    tolerance: 10,
    preventDefault: true,
  });

  // const upButton = document.getElementById("upButton");
  // const downButton = document.getElementById("downButton");

  // if (!upButton || !downButton) {
  //   throw new Error("Buttons not found");
  // }
  // upButton.addEventListener("click", () => {
  //   !animating && gotoSection(currentIndex - 1, -1);
  // });
  // downButton.addEventListener("click", () => {
  //   !animating && gotoSection(currentIndex + 1, 1);
  // });

  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  console.log(Number(urlParams.get("page")));
  gotoSection(Number(urlParams.get("page")), -1);
</script>
